{"mappings":"MA0DaA,EAAgB,SAASC,EAAOC,EAAK,SACxCC,EAAWF,EAAOC,GAClBE,EAASD,EAASE,KAAIC,GAAKA,EAAEC,QAC7BC,EAAMJ,EAAOK,QAAO,CAACC,EAAUC,IAC1BD,EAAWC,EAAUD,EAAWC,IAErCC,EAAMR,EAAOK,QAAO,CAACC,EAAUC,IAC1BD,EAAWC,EAAUD,EAAWC,IAErCE,EAAQT,EACTC,KAAIC,GAAKA,IACTG,QAAO,CAACK,EAAKC,IACHD,EAAMC,GACd,GACDC,EACFZ,EAAOK,QAAO,CAACQ,EAAGC,IAAMD,EAAIC,IAAKd,EAAOe,OAElCC,EAASjB,EAASkB,MAAK,CAACJ,EAAGC,IAAMA,EAAEX,MAAQU,EAAEV,eAG/CC,IAAAA,EACAI,IAAAA,EACAC,MAAAA,EACAG,KAAMM,KAAKC,MAAMP,GACjBI,OAAAA,QC3ERI,EAAAA,GAAaC,EAAAA,GAAcC,EAAAA,SAEzBC,EAAQ,SAASC,GDeG,IAACC,EAASC,EAATD,ECbHD,EAAKG,MDaOD,ECdhB,GAChBN,EDcaQ,MAAMC,KAAAA,CAEjBd,OAAQG,KAAKY,KAAKL,EAAQV,OAASW,KAErC,CAACK,EAAGC,IAAMP,EAAQQ,MAAMD,EAAIN,EAAQM,EAAIN,EAASA,WCjB3CQ,EDuBe,SAASP,SAC3B3B,EAAS2B,EAAM1B,KAAIC,GAAKA,EAAEC,QAC1BC,EAAMJ,EAAOK,QAAO,CAACC,EAAUC,IAC1BD,EAAWC,EAAUD,EAAWC,IAErCC,EAAMR,EAAOK,QAAO,CAACC,EAAUC,IAC1BD,EAAWC,EAAUD,EAAWC,IAErCE,EAAQT,EACTC,KAAIC,GAAKA,IACTG,QAAO,CAACK,EAAKC,IACHD,EAAMC,GACd,GAEDC,EAAOZ,EAAOK,QAAO,CAACQ,EAAGC,IAAMD,EAAIC,IAAKd,EAAOe,cAE1CX,IAAAA,EACAI,IAAAA,EACAC,MAAAA,EACAG,KAAMM,KAAKC,MAAMP,IC1CnBsB,CAAqBV,EAAKG,OAChCL,EAAOY,QACDnC,EAAAA,EAAyBqB,GACzBe,EAASX,EAAKG,MAAMV,MAAK,CAACJ,EAAGC,IAAMA,EAAEX,MAAQU,EAAEV,eACrDkB,EAAUc,GAENV,QAASU,EACTC,KAAMF,EACNnC,SAAAA,IAIRsC,KAAKC,iBACH,WACA,SAASC,OACHf,EAAOe,EAAEf,YACLA,EAAKgB,SACN,cACGC,EAAUlB,EAAMC,GACtBa,KAAKK,YAAYD,aAEd,eACGE,EDlCQ,SAAS9C,EAAQ2B,EAAMC,EAASW,UAGhDX,QAAAA,EACAW,KAAAA,EACArC,SAJaH,EAAcC,EAAQ2B,EAAKoB,QCiChCD,CAAiBvB,EAAQI,EAAMH,EAASC,GAC9Ce,KAAKK,YAAYC,iBAGjBN,KAAKK,YAAY,uBAGvB","sources":["./src/worker/utils.js","./src/worker/index.js"],"sourcesContent":["export const update = function(chunks, data, entries, meta) {\n  const viewport = viewportDatum(chunks, data.chunk);\n  return {\n      entries, \n      meta, \n      viewport\n  };\n};\nexport const destroy = function(worker) {\n    worker.terminate();\n    worker.removeEventListener(\n        'message',\n        e => {\n            console.log(e.data);\n        },\n        false\n    );\n    worker.removeEventListener(\n        'error',\n        e => console.log(e.message),\n        false\n    );\n};\n\nexport const makeChunks = (entries, number) => {\n  const result = Array.from(\n    {\n      length: Math.ceil(entries.length / number)\n    },\n    (v, i) => entries.slice(i * number, i * number + number)\n  );\n  return result;\n};\n\n\nexport const metaDatum = function(datum) {\n const values = datum.map(c => c.value);\n const min = values.reduce((previous, current) => {\n     return previous < current ? previous : current;\n });\n const max = values.reduce((previous, current) => {\n     return previous > current ? previous : current;\n });\n const total = values\n     .map(c => c)\n     .reduce((acc, val) => {\n         return acc + val;\n     }, 0);\n\n const mean = values.reduce((a, b) => a + b) / values.length;\n        return {\n            min,\n            max,\n            total,\n            mean: Math.floor(mean)\n        };\n};\n\nexport const viewportDatum = function(chunks,id = 0) {\n    const viewport = chunks[id];\n    const values = viewport.map(c => c.value);\n    const min = values.reduce((previous, current) => {\n        return previous < current ? previous : current;\n    });\n    const max = values.reduce((previous, current) => {\n        return previous > current ? previous : current;\n    });\n    const total = values\n        .map(c => c)\n        .reduce((acc, val) => {\n            return acc + val;\n        }, 0);\n    const mean =\n        values.reduce((a, b) => a + b) / values.length;\n    \n        const active = viewport.sort((a, b) => b.value - a.value);\n\n        return {\n            min,\n            max,\n            total,\n            mean: Math.floor(mean),\n            active\n        };\n};","import {\n    makeChunks,\n    metaDatum,\n    viewportDatum,\n    update\n} from './utils';\n\nlet chunks = [], entries = [], meta = {};\n\nconst start = function(data) {\n    const chunkBy = 10;\n    chunks = makeChunks(data.datum, chunkBy); \n    const boundary = metaDatum(data.datum);\n    meta = boundary; \n    const viewport = viewportDatum(chunks);\n    const sorted = data.datum.sort((a, b) => b.value - a.value);\n    entries = sorted;\n    return {\n        entries: sorted, \n        meta: boundary, \n        viewport \n    };\n};\n\nself.addEventListener(\n  \"message\",\n  function(e) {\n    var data = e.data;\n    switch (data.cmd) {\n      case \"start\":\n        const initial = start(data);\n        self.postMessage(initial);\n        break;\n      case \"update\":\n        const updated = update(chunks, data, entries, meta);\n        self.postMessage(updated);\n        break;\n      default:\n        self.postMessage(\"Unknown command\");\n    }\n  },\n  false\n);\n"],"names":["$4904465f986d92bb5cd0fc35c9444978$export$viewportDatum","chunks","id","viewport","values","map","c","value","min","reduce","previous","current","max","total","acc","val","mean","a","b","length","active","sort","Math","floor","$d06ccec35a254b4e4370807a0f1c540f$var$chunks","$d06ccec35a254b4e4370807a0f1c540f$var$entries","$d06ccec35a254b4e4370807a0f1c540f$var$meta","$d06ccec35a254b4e4370807a0f1c540f$var$start","data","entries","number","datum","Array","from","ceil","v","i","slice","boundary","sorted","meta","self","addEventListener","e","cmd","initial","postMessage","updated","chunk"],"version":3,"file":"worker.bdc74757.js.map"}